var neo4j = require('neo4j-driver').v1;
var driver;

// Module exports

module.exports = DB;

// DB constructor function

function DB(username, password) {
    if (!(this instanceof DB)) {
        return new DB(username, password);
    }

    this.username = username;
    this.password = password;
    driver = neo4j.driver("bolt://localhost", neo4j.auth.basic(this.username, this.password));
}

DB.prototype.closeDriver = function() {
    driver.close();
}

// General functions

function runStatement(params, statement, resolve, reject) {
    var result;
    var session = driver.session();
    session
        .run(statement, params)
        .then(function(result) {
            session.close();
            if (result.records[0]['keys'] && result.records[0]['_fields']) {
                resolve(result.records[0]['keys'].mergeIntoDictionary(result.records[0]['_fields']));
            } else {
                resolve();
            }
        }).catch(function(err) {
            reject(err);
        });
}

// General exports functions

DB.prototype.runStatementIfValidDevice = function(uuid, passphrase, resolve, reject) { // NOTE: This function is not being used at the moment, althoe it will be used in the future
    getDeviceIfExists(uuid, function(result) {
        if (result['device.passphrase'] == passphrase) {
            resolve();
        } else {
            reject("Error: Invalid device passphrase entered.")
        }
    }, reject);
}

// Exports functions

DB.prototype.loadDevice = function(nickname, uuid, passphrase, resolve, reject) {
        getDeviceIfExists(uuid, function(result) {
            if (result['device.passphrase'] == passphrase) {
                if (result['device.nickname'] != nickname) {
                    changeNicknameForUUID(uuid, nickname, function() {
                        // Code to run when nickname is changed...
                    }, reject);
                }
                resolve();
                // Code to run for valid registered device...
            } else {
                reject("Error: Invalid device passphrase entered.");
            }
        }, function(err) {
            if (err) {
                reject(err);
                return;
            }
            createDevice(nickname, uuid, passphrase, function() {
                // Code to run after device was created...
            }, reject);
            resolve();
        });
    }
    /*
    DB.prototype.availablePeersChanged = function(peerList, updateVersion) {

    }
    */

DB.prototype.getNicknameForUUID = function(uuid, resolve, reject) {
    const nicknameStatement = 'MATCH (device:Device {uuid: {uuid}}) RETURN device.nickname';
    const nicknameParams = {
        uuid: uuid
    };

    runStatement(nicknameParams, nicknameStatement, resolve, reject);
}

DB.prototype.changeAvailablePeers = function(uuid, passphrase, change, isAddition, fullList, updateVersion, resolve, reject) {
    runStatementIfValidDevice(uuid, passphrase, function() {
        if (isAddition) {
            addDeviceSeeingDevice(uuid, change, resolve, reject);
        } else {
            removeDeviceSeeingDevice(uuid, change, resolve, reject);
        }
    }, reject);
}

DB.prototype.disconnectDevice = function(uuid, resolve, reject) {
    const deviceStatement = 'MATCH (device:Device {uuid: {uuid}}) SET device.updateVersion = 1 RETURN device';
    const deviceParams = {
        uuid: uuid
    };

    runStatement(deviceParams, deviceStatement, function(result) {
        resolve();
    }, reject);
}

// Internal functions

function createDevice(nickname, uuid, passphrase, resolve, reject) {
    const registrationStatement = 'CREATE (device:Device {nickname: {nickname}, uuid: {uuid}, passphrase: {passphrase}}) RETURN device';
    const registrationParams = {
        nickname: nickname,
        uuid: uuid,
        passphrase: passphrase
    };

    runStatement(registrationParams, registrationStatement, function(result) {
        resolve();
    }, function(err) {
        reject(err);
    });
}

function changeNicknameForUUID(uuid, nickname, resolve, reject) {
    const nicknameStatement = 'MATCH (device:Device {uuid: {uuid}}) SET device.nickname = {nickname} RETURN device.nickname';
    const nicknameParams = {
        uuid: uuid,
        nickname: nickname
    };

    runStatement(nicknameParams, nicknameStatement, function(result) {
        resolve();
    }, reject);
}

function addDeviceSeeingDevice(uuid, otherDeviceUUID, resolve, reject) {
    const deviceStatement = 'MATCH (device:Device {uuid: {uuid}}) MATCH (otherDevice:Device {uuid: {otherDeviceUUID}}) CREATE (device)-[rel:SEES]->(otherDevice) RETURN rel';
    const deviceParams = {
        uuid: uuid,
        otherDeviceUUID: otherDeviceUUID
    };

    runStatement(deviceParams, deviceStatement, function() {
        resolve();
    }, reject);
}

function removeDeviceSeeingDevice(uuid, otherDeviceUUID, resolve, reject) {
    const deviceStatement = 'MATCH (device:Device {uuid: {uuid}}) MATCH (otherDevice:Device {uuid: {otherDeviceUUID}}) DELETE (device)-[rel:SEES]->(otherDevice) RETURN rel';
    const deviceParams = {
        uuid: uuid,
        otherDeviceUUID: otherDeviceUUID
    };

    runStatement(deviceParams, deviceStatement, function() {
        resolve();
    }, reject);
}

function getDeviceIfExists(uuid, resolve, reject) {
    const deviceStatement = 'MATCH (device:Device {uuid: {uuid}}) RETURN device.nickname, device.passphrase';
    const deviceParams = {
        uuid: uuid
    };

    runStatement(deviceParams, deviceStatement, resolve, reject);
}

// Array functions

Array.prototype.mergeIntoDictionary = function(secondArray) {
    var dict = {};
    this.forEach(function(element, index) {
        dict[element] = secondArray[index];
    })

    return dict;
};